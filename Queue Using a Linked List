package asm;

class Node {
    int data;
    Node next;
    
    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class Queue {
    private Node front, rear;
    
    public Queue() {
        this.front = this.rear = null;
    }
    
    public void enqueue(int data) {
        Node newNode = new Node(data);
        
        if (this.rear == null) {
            this.front = this.rear = newNode;
            return;
        }
        
        this.rear.next = newNode;
        this.rear = newNode;
    }
}

public int dequeue() {
        if (this.front == null) {
            System.out.println("Queue is empty");
            return -1;
        }
        
        int value = this.front.data;
        this.front = this.front.next;
        
        if (this.front == null) {
            this.rear = null;
        }
        
        return value;
    }
    
    public boolean isEmpty() {
        return this.front == null;
    }
    
    public int front() {
        if (this.front != null) {
            return this.front.data;
        }
        
        System.out.println("Queue is empty");
        return -1;
    }

public void display() {
       if (this.front == null) {
           System.out.println("Queue is empty");
           return;
       }
       
       Node temp = this.front;
       System.out.print("Queue: ");
       
       while (temp != null) {
           System.out.print(temp.data + " ");
           temp = temp.next;
       }
       
       System.out.println();
   }
}

public class Asm {
   public static void main(String[] args) {
       Queue queue = new Queue();
       
       queue.enqueue(10);
       queue.enqueue(20);
       queue.enqueue(30);
       
       queue.display();
       
       System.out.println("Front element: " + queue.front());
       
       System.out.println("Dequeued: " + queue.dequeue());
       queue.display();
       System.out.println("Dequeued: " + queue.dequeue());
       queue.display();
       
       System.out.println("Is queue empty? " + queue.isEmpty());
       
       System.out.println("Dequeued: " + queue.dequeue());
       queue.display();
       
       System.out.println("Is queue empty? " + queue.isEmpty());
   }
}
